// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  username    String @unique
  password    String
  namaLengkap String
  role        Role
}

model Administration {
  id                String      @id @default(uuid())
  RecordGroup       RecordGroup @relation(fields: [recordGroupId], references: [id])
  recordGroupId     String
  description       String
  dateSpanOfRecord  String?
  author            String?
  location          String      @unique
  retantionSchedule Int?
  File              File?       @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId            String?
}

model RecordGroup {
  id             String           @id @default(uuid())
  recordGroup    String           @unique
  name           String
  Administration Administration[]
}

model ConferenceArea {
  id                 String        @id @default(uuid())
  conferenceAreaName String
  Certificate        Certificate[]
}

model Department {
  id             String   @id @default(uuid())
  departmentName String
  Letter         Letter[]
}

model PhysicalBuilding {
  id           String        @id @default(uuid())
  physicalName String
  Certificate  Certificate[]
}

model Alphabet {
  id String @id @db.Char(1)
}

model Institution {
  id              String          @id @default(uuid())
  institutionName String
  ServiceRecord   ServiceRecord[]
}

model Number {
  id   String @id @default(uuid())
  name String @unique
}

model Retirement {
  id          String  @id @default(uuid())
  name        String
  rate        Rate
  status      Status
  description String?
  location    String  @unique
  File        File?   @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId      String?
}

model Certificate {
  id                 String           @id @default(uuid())
  ConferenceArea     ConferenceArea   @relation(fields: [conferenceAreaId], references: [id])
  conferenceAreaId   String
  congregation       String
  type               CertificateType?
  certificate        String?
  PhysicalBuilding   PhysicalBuilding @relation(fields: [physicalBuildingId], references: [id])
  physicalBuildingId String
  value              String?
  description        String?
  location           String           @unique
  File               File?            @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId             String?
}

model ServiceRecord {
  id            String      @id @default(uuid())
  status        Status
  Institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
  name          String
  description   String?
  location      String      @unique
  File          File?       @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId        String?
}

model Letter {
  id               String     @id @default(uuid())
  Department       Department @relation(fields: [departmentId], references: [id])
  departmentId     String
  type             LetterType
  dateSpanOfRecord String
  author           String
  description      String?
  location         String     @unique
  File             File?      @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId           String?
}

model File {
  id             String           @id @default(uuid())
  filename       String
  path           String
  destination    String
  mimetype       String
  Administration Administration[]
  Certificate    Certificate[]
  ServiceRecord  ServiceRecord[]
  Letter         Letter[]
  Retirement     Retirement[]
}

enum Role {
  ADMIN
  OPERATOR
  USER
}

enum Rate {
  Single
  Family
}

enum Status {
  Active
  Inactive
}

enum CertificateType {
  original
  copy
}

enum LetterType {
  IN
  OUT
  IN_OUT
}
